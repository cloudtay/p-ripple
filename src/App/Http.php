<?php

namespace Cclilshy\PRipple\App;

use Cclilshy\PRipple\App\Http\Request;
use Cclilshy\PRipple\App\Http\RequestFactory;
use Cclilshy\PRipple\App\Http\RequestSingleException;
use Cclilshy\PRipple\App\Http\Response;
use Cclilshy\PRipple\Build;
use Cclilshy\PRipple\PRipple;
use Cclilshy\PRipple\Service\Client;
use Cclilshy\PRipple\Worker\NetWorker;
use Fiber;
use Throwable;

class Http extends NetWorker
{
    /**
     * @var RequestFactory $requestFactory
     */
    private RequestFactory $requestFactory;

    /**
     * @var Fiber[] $fibers
     */
    private array $fibers = [];

    /**
     * @var callable $requestHandler
     */
    private mixed $requestHandler;

    /**
     * 创建请求工厂
     * @return void
     */
    public function initialize(): void
    {
        $this->subscribe('http.upload.complete');
        $this->requestFactory = new RequestFactory(function (Request $request) {
            $this->fibers[$request->hash] = new Fiber(function () use ($request) {
                if ($this->requestHandler) {
                    call_user_func($this->requestHandler, $request);
                }
            });
            if (!$event = $this->fibers[$request->hash]->start()) {
                $this->recover($request->hash);
            } else {
                PRipple::publish($event);
            }
        }, $this);
        parent::initialize();
    }

    /**
     * @param string $hash
     * @return void
     */
    private function recover(string $hash): void
    {
        if (isset($this->fibers[$hash])) {
            unset($this->fibers[$hash]);
        }
        $this->requestFactory->recover($hash);
    }

    /**
     * @return void
     */
    public function heartbeat(): void
    {
        //TODO: Implement heartbeat() method.
    }

    /**
     * @param Client $client
     * @return void
     */
    public function onConnect(Client $client): void
    {
        $client->setNoBlock();
    }

    /**
     * @param string $context
     * @param Client $client
     * @return void
     */
    public function onMessage(string $context, Client $client): void
    {
        try {
            $this->requestFactory->revolve($context, $client);
        } catch (RequestSingleException $exception) {
            $client->send(new Response(400, [], $exception->getMessage()));
        }
    }

    /**
     * 回收请求
     * @param Client $client
     * @return void
     */
    public function onClose(Client $client): void
    {
        echo 'close:' . $client->getHash() . PHP_EOL;
    }

    /**
     * @return void
     */
    public function destroy(): void
    {
        // TODO: Implement destroy() method.
    }

    /**
     * 定义请求处理
     * @param callable $requestHandler
     * @return void
     */
    public function defineRequestHandler(callable $requestHandler): void
    {
        $this->requestHandler = $requestHandler;
    }

    protected function handleEvent(Build $event): void
    {
        switch ($event->name) {
            case 'http.upload.complete':
                $data = $event->data;
                $hash = $data['hash'];
                if (isset($this->fibers[$hash])) {
                    try {
                        if (!$response = $this->fibers[$hash]->resume($event)) {
                            $this->recover($hash);
                        } else {
                            PRipple::publish($response);
                        }
                    } catch (Throwable $e) {
                        echo $e->getMessage() . PHP_EOL;
                        $this->recover($hash);
                    }
                }
                break;
            default:
                break;
        }
        parent::handleEvent($event); // TODO: Change the autogenerated stub
    }
}
